    printf("1");
    if (!possible(arr,size)) { exit(1); }
    printf("2");
    if (is_finished(arr,size)) {
        int* res=malloc(1);
        res[0]=0;
        return res;
    }
    int *res=malloc(2);
    res[0]=1;
    int* end_pointer=NULL;
    printf("3");
    for (int i=0;i<size;i++) {
        int *nextPlay=next(arr,size,i);
        if (nextPlay==NULL) {
            return NULL;
        }
        printf("4");
        if (possible(nextPlay,size)) {
            res[1]=i;
            print_arr(&res[1],res[0]);
            end_pointer=solution_aux(nextPlay,size,res);
            break;
        }
        free(nextPlay);
    }
    free(res);
    return end_pointer;


    aux

    printf("2.1");
    if (is_finished(arr,size)) {
        int *res=malloc(coups[0]+1);
        arrCpy(res,coups,coups[0]+1);
	    return res;
    }
    int *res=malloc(coups[0]+2);
    arrCpy(res,coups,coups[0]+1);
    coups[0]++;
    int *pointeur_solution=NULL;
    for (int i=0;i<size;i++) {
        int *coupSuivant=next(arr,size,i);
        if (coupSuivant==NULL) {
            return NULL;
        }
        if (possible(coupSuivant,size)) {
            res[res[0]]=i;
            print_arr(&res[1],res[0]);
            pointeur_solution=solution_aux(coupSuivant,size,res);
            free(coupSuivant);
            break;
        }
        free(coupSuivant);
    }
    free(res);
    return pointeur_solution;


    int indexmax=0;
    for (int i=0;i<n+1;i++) {
        if (i%2==0) {
            jeu[0]=0;
            for (int j=0;j<indexmax;j++) {
                if (jeu[j]==0) {
                    break;
                } if (j==indexmax-1) {
                    indexmax++;
                }
            }
            jeu[indexmax]=indexmax+1;
            int reste=i-indexmax,valCases=1;
            jeu[0]=0;
            for (int j=indexmax;j>0;j--) {
                if (indexmax>0) {
                    jeu[j]=j+1-valCases;
                    reste-=jeu[j];
                    valCases++;
                } else {
                    jeu[j]=0;
                }
            }
        } else {
            jeu[0]=1;
        }
    }